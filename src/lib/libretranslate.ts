export interface LibreTranslateResponse {
  translatedText: string;
}

export interface MyMemoryResponse {
  responseData: {
    translatedText: string;
  };
  quotaFinished?: boolean;
  mtLimitSupported?: boolean;
  responseDetails?: string;
  responseStatus?: number;
}

// Free LibreTranslate public instances (verified working)
const LIBRETRANSLATE_INSTANCES = [
  'https://libretranslate.de',
  'https://translate.argosopentech.com'
];

export async function getLibreTranslate(word: string, sourceLang: string = 'en', targetLang: string = 'hi'): Promise<string | null> {
  // Try each free instance until one works
  for (const instance of LIBRETRANSLATE_INSTANCES) {
    try {
      console.log(`üåê LibreTranslate (${instance}): Translating "${word}" from ${sourceLang} to ${targetLang}`);
      
      const response = await fetch(`${instance}/translate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
        },
        body: new URLSearchParams({
          q: word,
          source: sourceLang,
          target: targetLang,
          format: 'text'
        })
      });

      console.log(`üåê LibreTranslate (${instance}) response status: ${response.status}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.log(`LibreTranslate (${instance}) error: ${response.status} - ${errorText}`);
        continue; // Try next instance
      }

      const data = await response.json();
      console.log(`üåê LibreTranslate (${instance}) response data:`, data);
      
      if (data.translatedText) {
        console.log(`üåê LibreTranslate (${instance}) success: "${word}" ‚Üí "${data.translatedText}"`);
        return data.translatedText;
      }
      
    } catch (error) {
      console.log(`LibreTranslate (${instance}) error:`, error);
      continue; // Try next instance
    }
  }
  
  console.log('All LibreTranslate instances failed');
  return null;
}

export async function getMyMemoryTranslate(word: string, sourceLang: string = 'en', targetLang: string = 'hi'): Promise<string | null> {
  try {
    console.log(`üåê MyMemory: Translating "${word}" from ${sourceLang} to ${targetLang}`);
    
    const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=${sourceLang}|${targetLang}`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      }
    });

    console.log(`üåê MyMemory response status: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`MyMemory API error: ${response.status} - ${errorText}`);
      return null;
    }

    const data: MyMemoryResponse = await response.json();
    console.log(`üåê MyMemory response data:`, data);
    
    if (data.responseData && data.responseData.translatedText) {
      console.log(`üåê MyMemory success: "${word}" ‚Üí "${data.responseData.translatedText}"`);
      return data.responseData.translatedText;
    }
    
    return null;
  } catch (error) {
    console.error('Error fetching translation from MyMemory:', error);
    return null;
  }
}

// Simple translation dictionary for common phrases
const commonTranslations: { [key: string]: string } = {
  // Hurry examples
  "Why are you in such a big hurry?": "‡§Ü‡§™ ‡§á‡§§‡§®‡•Ä ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§π‡•à‡§Ç?",
  "There is no hurry on that paperwork.": "‡§â‡§∏ ‡§ï‡§æ‡§ó‡§ú‡•Ä ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
  "Don't hurry, take your time.": "‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§Æ‡§§ ‡§ï‡§∞‡•ã, ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Æ‡§Ø ‡§≤‡•ã‡•§",
  "I'm in a hurry to catch the train.": "‡§Æ‡•Å‡§ù‡•á ‡§ü‡•ç‡§∞‡•á‡§® ‡§™‡§ï‡§°‡§º‡§®‡•á ‡§ï‡•Ä ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§π‡•à‡•§",
  "She hurried to finish her work.": "‡§â‡§∏‡§®‡•á ‡§Ö‡§™‡§®‡§æ ‡§ï‡§æ‡§Æ ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§ï‡•Ä‡•§",
  
  // Happiness examples
  "She was happy to see her friend.": "‡§µ‡§π ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•ã ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§ñ‡•Å‡§∂ ‡§•‡•Ä‡•§",
  "Happiness is the key to success.": "‡§ñ‡•Å‡§∂‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§π‡•à‡•§",
  "They celebrated the happy occasion together.": "‡§â‡§®‡•ç‡§π‡•ã‡§Ç‡§®‡•á ‡§ñ‡•Å‡§∂ ‡§Æ‡•å‡§ï‡•á ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• ‡§Æ‡§®‡§æ‡§Ø‡§æ‡•§",
  "The children were happy playing in the garden.": "‡§¨‡§ö‡•ç‡§ö‡•á ‡§¨‡§ó‡•Ä‡§ö‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡•á‡§≤‡§ï‡§∞ ‡§ñ‡•Å‡§∂ ‡§•‡•á‡•§",
  "A happy family is a blessing.": "‡§ñ‡•Å‡§∂ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§è‡§ï ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§π‡•à‡•§",
  
  // Just examples
  "It is a just assessment of the facts.": "‡§Ø‡§π ‡§§‡§•‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§∏‡§Ç‡§ó‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§π‡•à‡•§",
  "The judge made a just decision.": "‡§®‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§ß‡•Ä‡§∂ ‡§®‡•á ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§∏‡§Ç‡§ó‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡§ø‡§Ø‡§æ‡•§",
  "This is just the beginning.": "‡§Ø‡§π ‡§§‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§π‡•à‡•§",
  "I just arrived at the station.": "‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§™‡§π‡•Å‡§Ç‡§ö‡§æ ‡§π‡•Ç‡§Ç‡•§",
  "She was just trying to help.": "‡§µ‡§π ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§•‡•Ä‡•§",
  
  // Common phrases
  "The weather is beautiful today.": "‡§Ü‡§ú ‡§Æ‡•å‡§∏‡§Æ ‡§¨‡§π‡•Å‡§§ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§π‡•à‡•§",
  "Learning new words is fun.": "‡§®‡§è ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§π‡•à‡•§",
  "Practice makes perfect.": "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡•á ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§",
  "Knowledge is power.": "‡§ú‡•ç‡§û‡§æ‡§® ‡§π‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø ‡§π‡•à‡•§",
  "Time is precious.": "‡§∏‡§Æ‡§Ø ‡§¨‡§π‡•Å‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§π‡•à‡•§"
};

export async function getSimpleTranslation(word: string, sourceLang: string = 'en', targetLang: string = 'hi'): Promise<string | null> {
  try {
    console.log(`üìö Simple translation: Looking up "${word}"`);
    
    // Check if we have a direct translation
    if (commonTranslations[word]) {
      console.log(`üìö Simple translation found: "${word}" ‚Üí "${commonTranslations[word]}"`);
      return commonTranslations[word];
    }
    
    // Try MyMemory as fallback
    console.log(`üìö No simple translation found, trying MyMemory...`);
    const myMemoryResult = await getMyMemoryTranslate(word, sourceLang, targetLang);
    if (myMemoryResult) {
      return myMemoryResult;
    }
    
    return null;
  } catch (error) {
    console.error('Error in simple translation:', error);
    return null;
  }
}

export async function translateWithFallback(word: string, sourceLang: string = 'en', targetLang: string = 'hi'): Promise<string | null> {
  console.log(`üîÑ translateWithFallback called with: "${word}"`);
  
  // Try simple translation dictionary first (instant and reliable)
  const simpleResult = await getSimpleTranslation(word, sourceLang, targetLang);
  if (simpleResult) {
    console.log(`‚úÖ Local dictionary success: "${word}" ‚Üí "${simpleResult}"`);
    return simpleResult;
  }
  
  // Try free LibreTranslate instances (best quality when available)
  const libreResult = await getLibreTranslate(word, sourceLang, targetLang);
  if (libreResult) {
    console.log(`‚úÖ LibreTranslate success: "${word}" ‚Üí "${libreResult}"`);
    return libreResult;
  }
  
  // Fallback to MyMemory
  const myMemoryResult = await getMyMemoryTranslate(word, sourceLang, targetLang);
  if (myMemoryResult) {
    console.log(`‚úÖ MyMemory success: "${word}" ‚Üí "${myMemoryResult}"`);
    return myMemoryResult;
  }
  
  console.log(`üåê All translation services failed for: "${word}"`);
  return null;
}
